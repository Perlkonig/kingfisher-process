# Generated by Django 3.0 on 2019-12-12 22:30

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.TextField()),
                ('data_version', models.DateTimeField()),
                ('store_start_at', models.DateTimeField()),
                ('store_end_at', models.DateTimeField(blank=True, null=True)),
                ('sample', models.BooleanField(default=False)),
                ('check_data', models.BooleanField(default=False)),
                ('check_older_data_with_schema_version_1_1', models.BooleanField(default=False)),
                ('transform_type', models.TextField(blank=True, choices=[('compile-releases', 'Compile releases'), ('upgrade-1-0-to-1-1', 'Upgrade from 1.0 to 1.1 ')], null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('cached_releases_count', models.IntegerField(blank=True, null=True)),
                ('cached_records_count', models.IntegerField(blank=True, null=True)),
                ('cached_compiled_releases_count', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'collection',
            },
        ),
        migrations.CreateModel(
            name='CollectionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(blank=True, null=True)),
                ('store_start_at', models.DateTimeField(blank=True, null=True)),
                ('store_end_at', models.DateTimeField(blank=True, null=True)),
                ('warnings', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('errors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'collection_file',
            },
        ),
        migrations.CreateModel(
            name='CollectionFileItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_start_at', models.DateTimeField(blank=True, null=True)),
                ('store_end_at', models.DateTimeField(blank=True, null=True)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('warnings', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('errors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'collection_file_item',
            },
        ),
        migrations.CreateModel(
            name='CollectionNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('stored_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'collection_note',
            },
        ),
        migrations.CreateModel(
            name='CompiledRelease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ocid', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compiled_release',
            },
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_md5', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'data',
            },
        ),
        migrations.CreateModel(
            name='PackageData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_md5', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'package_data',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ocid', models.TextField(blank=True, null=True)),
                ('collection_file_item', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.CollectionFileItem')),
                ('data', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Data')),
                ('package_data', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.PackageData')),
            ],
            options={
                'db_table': 'record',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release_id', models.TextField(blank=True, null=True)),
                ('ocid', models.TextField(blank=True, null=True)),
                ('collection_file_item', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.CollectionFileItem')),
                ('data', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Data')),
                ('package_data', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.PackageData')),
            ],
            options={
                'db_table': 'release',
            },
        ),
        migrations.CreateModel(
            name='ReleaseCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('override_schema_version', models.TextField(blank=True, null=True)),
                ('cove_output', django.contrib.postgres.fields.jsonb.JSONField()),
                ('release', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Release')),
            ],
            options={
                'db_table': 'release_check',
            },
        ),
        migrations.CreateModel(
            name='RecordCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('override_schema_version', models.TextField(blank=True, null=True)),
                ('cove_output', django.contrib.postgres.fields.jsonb.JSONField()),
                ('record', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Record')),
            ],
            options={
                'db_table': 'record_check',
            },
        ),
        migrations.AddConstraint(
            model_name='packagedata',
            constraint=models.UniqueConstraint(fields=('hash_md5',), name='unique_package_data_hash_md5'),
        ),
        migrations.AddConstraint(
            model_name='data',
            constraint=models.UniqueConstraint(fields=('hash_md5',), name='unique_data_hash_md5'),
        ),
        migrations.AddField(
            model_name='compiledrelease',
            name='collection_file_item',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.CollectionFileItem'),
        ),
        migrations.AddField(
            model_name='compiledrelease',
            name='data',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Data'),
        ),
        migrations.AddField(
            model_name='collectionnote',
            name='collection',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Collection'),
        ),
        migrations.AddField(
            model_name='collectionfileitem',
            name='collection_file',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.CollectionFile'),
        ),
        migrations.AddField(
            model_name='collectionfile',
            name='collection',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='default.Collection'),
        ),
        migrations.AddField(
            model_name='collection',
            name='transform_from_collection',
            field=models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='default.Collection'),
        ),
        migrations.AddConstraint(
            model_name='releasecheck',
            constraint=models.UniqueConstraint(fields=('release', 'override_schema_version'), name='unique_release_check_release_id_and_more'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['collection_file_item'], name='release_collection_file_item_id_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['ocid'], name='release_ocid_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['data'], name='release_data_id_idx'),
        ),
        migrations.AddConstraint(
            model_name='recordcheck',
            constraint=models.UniqueConstraint(fields=('record', 'override_schema_version'), name='unique_record_check_record_id_and_more'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['collection_file_item'], name='record_collection_file_item_id_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['ocid'], name='record_ocid_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['data'], name='record_data_id_idx'),
        ),
        migrations.AddIndex(
            model_name='compiledrelease',
            index=models.Index(fields=['collection_file_item'], name='compiled_release_collection_file_item_id_idx'),
        ),
        migrations.AddIndex(
            model_name='compiledrelease',
            index=models.Index(fields=['ocid'], name='compiled_release_ocid_idx'),
        ),
        migrations.AddIndex(
            model_name='compiledrelease',
            index=models.Index(fields=['data'], name='compiled_release_data_id_idx'),
        ),
        migrations.AddConstraint(
            model_name='collectionfileitem',
            constraint=models.UniqueConstraint(fields=('collection_file', 'number'), name='unique_collection_file_item_identifiers'),
        ),
        migrations.AddConstraint(
            model_name='collectionfile',
            constraint=models.UniqueConstraint(fields=('collection', 'filename'), name='unique_collection_file_identifiers'),
        ),
        migrations.AddConstraint(
            model_name='collection',
            constraint=models.UniqueConstraint(fields=('source_id', 'data_version', 'sample', 'transform_from_collection', 'transform_type'), name='unique_collection_identifiers'),
        ),
    ]
